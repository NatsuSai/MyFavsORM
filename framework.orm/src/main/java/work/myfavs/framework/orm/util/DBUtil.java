package work.myfavs.framework.orm.util;

import java.sql.*;
import java.util.Iterator;
import java.util.List;
import javax.sql.DataSource;
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.jdbc.support.JdbcUtils;
import work.myfavs.framework.orm.repository.handler.PropertyHandlerFactory;

/**
 * 数据库工具类
 */
public class DBUtil {

  /**
   * 创建数据库链接
   *
   * @param dataSource DataSource
   *
   * @return Connection
   */
  public static Connection createConnection(DataSource dataSource) {

    return DataSourceUtils.getConnection(dataSource);
  }


  /**
   * 获取 PreparedStatement
   *
   * @param conn   Connection
   * @param sql    Sql语句
   * @param params 参数数组
   *
   * @return PreparedStatement
   *
   * @throws SQLException SQLException
   */
  public static PreparedStatement getPs(Connection conn, String sql, Object[] params)
      throws SQLException {

    return getPs(conn, false, sql, params);
  }

  /**
   * 获取 PreparedStatement
   *
   * @param conn            Connection
   * @param autoGeneratedPK 是否自增主键
   * @param sql             Sql语句
   * @param params          参数数组
   *
   * @return PreparedStatement
   *
   * @throws SQLException SQLException
   */
  public static PreparedStatement getPs(Connection conn, boolean autoGeneratedPK, String sql, Object[] params)
      throws SQLException {

    PreparedStatement pst = getPs(conn, autoGeneratedPK, sql);
    setParams(pst, params);
    return pst;
  }

  /**
   * 从 Connection 获取 PreparedStatement
   *
   * @param connection      数据库链接
   * @param autoGeneratedPK 是否自动生成主键
   * @param sql             Sql语句
   *
   * @return PreparedStatement
   *
   * @throws SQLException SQLException
   */
  public static PreparedStatement getPs(Connection connection, boolean autoGeneratedPK, String sql)
      throws SQLException {

    PreparedStatement pst;
    if (autoGeneratedPK) {
      pst = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
    } else {
      pst = connection.prepareStatement(sql);
    }
    return pst;
  }

  /**
   * 获取sql执行对象
   *
   * @param conn            Connection
   * @param autoGeneratedPK 是否自增主键
   * @param sql             Sql语句
   * @param params          参数数组集合
   * @param batchSize
   *
   * @return PreparedStatement
   *
   * @throws SQLException SQLException
   */
  public static PreparedStatement getPsForUpdate(Connection conn, boolean autoGeneratedPK, String sql, List<Object[]> params, int batchSize)
      throws SQLException {

    PreparedStatement pst = getPs(conn, autoGeneratedPK, sql);
    int               i   = 0;
    for (Iterator<Object[]> iterator = params.iterator();
         iterator.hasNext(); ) {
      setParams(pst, iterator.next());
      pst.addBatch();
      if (++i % batchSize == 0) {
        pst.executeBatch();
      }
    }
    return pst;
  }

  /**
   * 设置 PreparedStatement 参数
   *
   * @param preparedStatement PreparedStatement
   * @param params            参数数组
   *
   * @return PreparedStatement
   *
   * @throws SQLException SQLException
   */
  private static PreparedStatement setParams(PreparedStatement preparedStatement, Object[] params)
      throws SQLException {

    if (params != null && params.length > 0) {
      for (int i = 0;
           i < params.length;
           i++) {
        PropertyHandlerFactory.addParameter(preparedStatement, i + 1, params[i]);
      }
    }
    return preparedStatement;
  }

  /**
   * 关闭数据库连接
   *
   * @param connection Connection
   */
  public static void close(Connection connection) {

    JdbcUtils.closeConnection(connection);
  }

  /**
   * 关闭Statment
   *
   * @param statement Statement
   */
  public static void close(Statement statement) {

    JdbcUtils.closeStatement(statement);
  }

  /**
   * 关闭ResultSet
   *
   * @param resultSet ResultSet
   */
  public static void close(ResultSet resultSet) {

    JdbcUtils.closeResultSet(resultSet);
  }

  /**
   * 关闭Connection、Statement、ResultSet
   *
   * @param connection Connection
   * @param statement  Statement
   * @param resultSet  ResultSet
   */
  public static void close(Connection connection, Statement statement, ResultSet resultSet) {

    close(resultSet);
    close(connection, statement);
  }

  /**
   * 关闭Connection、Statement
   *
   * @param connection Connection
   * @param statement  Statement
   */
  public static void close(Connection connection, Statement statement) {

    close(statement);
    close(connection);
  }

  /**
   * Statement、ResultSet
   *
   * @param statement Statement
   * @param resultSet ResultSet
   */
  public static void close(Statement statement, ResultSet resultSet) {

    close(statement);
    close(resultSet);
  }

}
